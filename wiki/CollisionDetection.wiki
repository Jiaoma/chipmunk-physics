#summary Description of how Chipmunk does collision detection

= Collision Detection in Chipmunk =

In order to make collision detection in Chipmunk as fast as possible, the process is broken down into several steps. While I've tried to keep it as simple as possible, it can get a little hard to follow for the uninitiated.

== Spatial Hashing ==

Chipmunk uses a spatial hash for its broad phase culling. Spatial hashes are very efficient for a scene made up of consistently sized objects. It basically works by taking the axis aligned bounding boxes for all the objects in the scene, mapping them onto an infinite sized grid, then mapping those grid cells onto a finite sized hash table. This way, you only have to check collisions between objects in the same hash table cells, and mapping the objects onto the grid can be done fairly quickly. Objects in the same hash table cells tend to be very close together, and therefore more likely to be colliding.

The downside is that in order to get the best performance out of a spatial hash, you have to tune the size of the grid cells and the size of the hash table so you don't get too many false positives. You want to make the grid size 1/2 the size of the estimated average size of a bounding box so that objects will be split into about 4 grid cells each. To make it unlikely that objects in different grid cells will map to the same hash cell, use about 10x as many hash cells as objects. (memory is abundant and cheap) For more information see [cpSpace].

Things to keep in mind:
 * Using too small a grid size means that your objects will be split into many grid cells which means that the spatial hash will spend a lot of time filling empty hash cells for just one object and rarely finding any with multiple objects. Making the grid size too big means that you will be putting a lot of objects into a single hash cell, and collisions will have to be checked between all of them.
 * Using too small of a hash table means that you will map too many far away objects into a single hash cell. Using too many means that the hash table will have to spend a lot of time doing clears and rehashes.