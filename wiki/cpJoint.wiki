=Chipmunk Constraints: `cpConstraint`=

A constraint is something that describes how two bodies interact with each other. (how they constraint each other) Constraints can be simple joints that allow bodies to pivot around each other like the bones in your body, or they can be more abstract like the gear joint or motors.

==What constraints are and what they are not==

Constraints in Chipmunk are all velocity based constraints. This means that they act primarily by synchronizing the velocity of two bodies. A pivot joint holds two anchor points on two separate bodies together by defining equations that say that the velocity of the anchor points must be the same and calculating impulses to apply to the bodies to try and keep it that way. A constraint takes a velocity as it's primary input and produces a velocity change as it's output. 

A spring connected between two bodies is not a constraint. It's very constraint like as it creates forces that affect the velocities of the two bodies, but a spring takes distances as input and produces forces as it's output. TODO: finish

==Error correction by Feedback==

TODO: stub

==Constraints and Collision Shapes==

TODO: stub

=API:=

==Shared Memory Management Functions:==

{{{
void cpJointDestroy(cpJoint *joint)
void cpJointFree(cpJoint *joint)
}}}

 `Destroy` and `Free` functions are shared by all joint types. Allocation and initialization functions are specific to each joint type.
 
=Joint Types:=

==Pin Joints:==

{{{
cpPinJoint *cpPinJointAlloc(void)
cpPinJoint *cpPinJointInit(cpPinJoint *joint, cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2)
cpJoint *cpPinJointNew(cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2)
}}}

 `a` and `b` are the two bodies to connect, and `anchr1` and `anchr2` are the anchor points on those bodies.

==Slide Joints:==

{{{
cpSlideJoint *cpSlideJointAlloc(void)
cpSlideJoint *cpSlideJointInit(cpSlideJoint *joint, cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2, cpFloat min, cpFloat max)
cpJoint *cpSlideJointNew(cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2, cpFloat min, cpFloat max)
}}}

 `a` and `b` are the two bodies to connect, `anchr1` and `anchr2` are the anchor points on those bodies, and `min` and `max` define the allowed distances of the anchor points.

==Pivot Joints:==

{{{
cpPivotJoint *cpPivotJointAlloc(void)
cpPivotJoint *cpPivotJointInit(cpPivotJoint *joint, cpBody *a, cpBody *b, cpVect pivot)
cpJoint *cpPivotJointNew(cpBody *a, cpBody *b, cpVect pivot)
}}}

 `a` and `b` are the two bodies to connect, and `pivot` is the point in world coordinates of the pivot. Because the pivot location is given in world coordinates, you must have the bodies moved into the correct positions already.

==Groove Joint:==

{{{
cpGrooveJoint *cpGrooveJointAlloc(void)
cpGrooveJoint *cpGrooveJointInit(cpGrooveJoint *joint, cpBody *a, cpBody *b, cpVect groove_a, cpVect groove_b, cpVect anchr2)
cpJoint *cpGrooveJointNew(cpBody *a, cpBody *b, cpVect groove_a, cpVect groove_b, cpVect anchr2)
}}}

 The groove goes from _groov_a_ to _groove_b_ on body _a_, and the pivot is attached to _anchr2_ on body _b_. All coordinates are body local.

=Notes:=

 * You can add multiple joints between two bodies, but make sure that they don't fight. It can cause the bodies to explode.
 * Make sure you add both of the connected bodies and the joint to a space.